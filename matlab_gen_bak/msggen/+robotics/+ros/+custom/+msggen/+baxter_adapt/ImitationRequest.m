classdef ImitationRequest < robotics.ros.Message
    %ImitationRequest MATLAB implementation of baxter_adapt/ImitationRequest
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2016 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'baxter_adapt/ImitationRequest' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'eecebf5c17dad7fd567742d92443882f' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        GeometryMsgsPointClass = robotics.ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/Point') % Dispatch to MATLAB class for message type geometry_msgs/Point
    end
    
    properties (Dependent)
        YStart
        YEnd
    end
    
    properties (Access = protected)
        Cache = struct('YStart', [], 'YEnd', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'YEnd', 'YStart'} % List of non-constant message properties
        ROSPropertyList = {'y_end', 'y_start'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = ImitationRequest(msg)
            %ImitationRequest Construct the message object ImitationRequest
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function ystart = get.YStart(obj)
            %get.YStart Get the value for property YStart
            if isempty(obj.Cache.YStart)
                obj.Cache.YStart = feval(obj.GeometryMsgsPointClass, obj.JavaMessage.getYStart);
            end
            ystart = obj.Cache.YStart;
        end
        
        function set.YStart(obj, ystart)
            %set.YStart Set the value for property YStart
            validateattributes(ystart, {obj.GeometryMsgsPointClass}, {'nonempty', 'scalar'}, 'ImitationRequest', 'ystart');
            
            obj.JavaMessage.setYStart(ystart.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.YStart)
                obj.Cache.YStart.setJavaObject(ystart.getJavaObject);
            end
        end
        
        function yend = get.YEnd(obj)
            %get.YEnd Get the value for property YEnd
            if isempty(obj.Cache.YEnd)
                obj.Cache.YEnd = feval(obj.GeometryMsgsPointClass, obj.JavaMessage.getYEnd);
            end
            yend = obj.Cache.YEnd;
        end
        
        function set.YEnd(obj, yend)
            %set.YEnd Set the value for property YEnd
            validateattributes(yend, {obj.GeometryMsgsPointClass}, {'nonempty', 'scalar'}, 'ImitationRequest', 'yend');
            
            obj.JavaMessage.setYEnd(yend.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.YEnd)
                obj.Cache.YEnd.setJavaObject(yend.getJavaObject);
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.YStart = [];
            obj.Cache.YEnd = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Recursively copy compound properties
            cpObj.YStart = copy(obj.YStart);
            cpObj.YEnd = copy(obj.YEnd);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.YStart = feval([obj.GeometryMsgsPointClass '.loadobj'], strObj.YStart);
            obj.YEnd = feval([obj.GeometryMsgsPointClass '.loadobj'], strObj.YEnd);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.YStart = saveobj(obj.YStart);
            strObj.YEnd = saveobj(obj.YEnd);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.baxter_adapt.ImitationRequest.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.baxter_adapt.ImitationRequest;
            obj.reload(strObj);
        end
    end
end

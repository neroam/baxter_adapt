classdef AdaptationRequest < robotics.ros.Message
    %AdaptationRequest MATLAB implementation of baxter_adapt/AdaptationRequest
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2016 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'baxter_adapt/AdaptationRequest' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'fee91147901babed898e685294d4d227' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        GeometryMsgsPointClass = robotics.ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/Point') % Dispatch to MATLAB class for message type geometry_msgs/Point
    end
    
    properties (Dependent)
        EnableAdapt
        StartJoints
        EndJoints
        Obstacles
    end
    
    properties (Access = protected)
        Cache = struct('Obstacles', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'EnableAdapt', 'EndJoints', 'Obstacles', 'StartJoints'} % List of non-constant message properties
        ROSPropertyList = {'enable_adapt', 'end_joints', 'obstacles', 'start_joints'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = AdaptationRequest(msg)
            %AdaptationRequest Construct the message object AdaptationRequest
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function enableadapt = get.EnableAdapt(obj)
            %get.EnableAdapt Get the value for property EnableAdapt
            enableadapt = logical(obj.JavaMessage.getEnableAdapt);
        end
        
        function set.EnableAdapt(obj, enableadapt)
            %set.EnableAdapt Set the value for property EnableAdapt
            validateattributes(enableadapt, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'AdaptationRequest', 'enableadapt');
            
            obj.JavaMessage.setEnableAdapt(enableadapt);
        end
        
        function startjoints = get.StartJoints(obj)
            %get.StartJoints Get the value for property StartJoints
            javaArray = obj.JavaMessage.getStartJoints;
            array = obj.readJavaArray(javaArray, 'double');
            startjoints = double(array);
        end
        
        function set.StartJoints(obj, startjoints)
            %set.StartJoints Set the value for property StartJoints
            if ~isvector(startjoints) && isempty(startjoints)
                % Allow empty [] input
                startjoints = double.empty(0,1);
            end
            
            validateattributes(startjoints, {'numeric'}, {'vector'}, 'AdaptationRequest', 'startjoints');
            
            javaArray = obj.JavaMessage.getStartJoints;
            array = obj.writeJavaArray(startjoints, javaArray, 'double');
            obj.JavaMessage.setStartJoints(array);
        end
        
        function endjoints = get.EndJoints(obj)
            %get.EndJoints Get the value for property EndJoints
            javaArray = obj.JavaMessage.getEndJoints;
            array = obj.readJavaArray(javaArray, 'double');
            endjoints = double(array);
        end
        
        function set.EndJoints(obj, endjoints)
            %set.EndJoints Set the value for property EndJoints
            if ~isvector(endjoints) && isempty(endjoints)
                % Allow empty [] input
                endjoints = double.empty(0,1);
            end
            
            validateattributes(endjoints, {'numeric'}, {'vector'}, 'AdaptationRequest', 'endjoints');
            
            javaArray = obj.JavaMessage.getEndJoints;
            array = obj.writeJavaArray(endjoints, javaArray, 'double');
            obj.JavaMessage.setEndJoints(array);
        end
        
        function obstacles = get.Obstacles(obj)
            %get.Obstacles Get the value for property Obstacles
            if isempty(obj.Cache.Obstacles)
                javaArray = obj.JavaMessage.getObstacles;
                array = obj.readJavaArray(javaArray, obj.GeometryMsgsPointClass);
                obj.Cache.Obstacles = feval(obj.GeometryMsgsPointClass, array);
            end
            obstacles = obj.Cache.Obstacles;
        end
        
        function set.Obstacles(obj, obstacles)
            %set.Obstacles Set the value for property Obstacles
            if ~isvector(obstacles) && isempty(obstacles)
                % Allow empty [] input
                obstacles = feval([obj.GeometryMsgsPointClass '.empty'], 0, 1);
            end
            
            validateattributes(obstacles, {obj.GeometryMsgsPointClass}, {'vector'}, 'AdaptationRequest', 'obstacles');
            
            javaArray = obj.JavaMessage.getObstacles;
            array = obj.writeJavaArray(obstacles, javaArray, obj.GeometryMsgsPointClass);
            obj.JavaMessage.setObstacles(array);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Obstacles)
                obj.Cache.Obstacles = [];
                obj.Cache.Obstacles = obj.Obstacles;
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Obstacles = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.EnableAdapt = obj.EnableAdapt;
            cpObj.StartJoints = obj.StartJoints;
            cpObj.EndJoints = obj.EndJoints;
            
            % Recursively copy compound properties
            cpObj.Obstacles = copy(obj.Obstacles);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.EnableAdapt = strObj.EnableAdapt;
            obj.StartJoints = strObj.StartJoints;
            obj.EndJoints = strObj.EndJoints;
            ObstaclesCell = arrayfun(@(x) feval([obj.GeometryMsgsPointClass '.loadobj'], x), strObj.Obstacles, 'UniformOutput', false);
            obj.Obstacles = vertcat(ObstaclesCell{:});
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.EnableAdapt = obj.EnableAdapt;
            strObj.StartJoints = obj.StartJoints;
            strObj.EndJoints = obj.EndJoints;
            strObj.Obstacles = arrayfun(@(x) saveobj(x), obj.Obstacles);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.baxter_adapt.AdaptationRequest.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.baxter_adapt.AdaptationRequest;
            obj.reload(strObj);
        end
    end
end
